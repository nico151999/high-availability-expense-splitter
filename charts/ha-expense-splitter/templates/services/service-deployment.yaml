{{- range $serviceName, $serviceSpec := .Values.haExpenseSplitter.services.specs }}
{{- $selectorParam := (dict "shortName" $serviceName "releaseName" $.Release.Name) }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ include "service-name-deployment" $serviceName }}"
  labels:
    {{- include "service-selectorLabels-deployment" $selectorParam | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "service-selectorlabels-pod" $selectorParam | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "service-selectorlabels-pod" $selectorParam | nindent 8 }}
      {{- if $serviceSpec.linkerdMesh }}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}
    spec:
      serviceAccountName: "{{ include "service-name-serviceaccount" $serviceName }}"
      {{- include "imagepullsecrets" (dict "primary" $serviceSpec.imagePullSecrets "fallback" $.Values.haExpenseSplitter.imagePullSecrets) | nindent 6 }}
      {{- include "securitycontext" (dict "primary" $serviceSpec.securityContext "fallback" $.Values.haExpenseSplitter.securityContext) | nindent 6 }}
      initContainers:
        - name: wait-for-nats
          image: {{ include "busyboxImage" $ }}
          {{- if $.Values.haExpenseSplitter.readOnlyRootFilesystem }}
          securityContext:
            readOnlyRootFilesystem: true
          {{- end }}
          command:
            - 'sh'
            - '-c'
            - |
              until nc -z "${{ include "global-natsServerHostKey" . }}" "${{ include "global-natsServerPortKey" . }}"
              do
                echo \"waiting for NATS\"
                sleep 1
              done
          env:
            - name: {{ include "global-natsServerHostKey" . }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "global-name-configMap" . }}
                  key: {{ include "global-natsServerHostKey" . }}
            - name: {{ include "global-natsServerPortKey" . }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "global-name-configMap" . }}
                  key: {{ include "global-natsServerPortKey" . }}
        - name: wait-for-trace-collector
          image: {{ include "busyboxImage" $ }}
          {{- if $.Values.haExpenseSplitter.readOnlyRootFilesystem }}
          securityContext:
            readOnlyRootFilesystem: true
          {{- end }}
          command:
            - 'sh'
            - '-c'
            - |
              until nc -z "${{ include "global-traceCollectorHostKey" . }}" "${{ include "global-traceCollectorPortKey" . }}"
              do
                echo \"waiting for trace collector\"
                sleep 1
              done
          env:
            - name: {{ include "global-traceCollectorHostKey" . }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "global-name-configMap" . }}
                  key: {{ include "global-traceCollectorHostKey" . }}
            - name: {{ include "global-traceCollectorPortKey" . }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "global-name-configMap" . }}
                  key: {{ include "global-traceCollectorPortKey" . }}
      containers:
        # TODO: add init container that waits for dependencies to become available
        - name: "{{ $.Chart.Name }}-{{ $serviceName }}"
          args:
            - "{{ printf "-%sCorsCfg" $serviceName}}"
            - "{{ include "service-corsConfigFilePath" $serviceName }}"
          image: "{{ $serviceSpec.image.repository }}:{{ $serviceSpec.image.tag }}"
          imagePullPolicy: "{{default $.Values.haExpenseSplitter.imagePullPolicy $serviceSpec.imagePullPolicy}}"
          {{- if $.Values.haExpenseSplitter.readOnlyRootFilesystem }}
          securityContext:
            readOnlyRootFilesystem: true
          {{- end }}
          resources:
            {{- toYaml $serviceSpec.resources | nindent 12 }}
          ports:
            - name: {{ include "service-name-port" $serviceName }}
              containerPort: {{ include "service-serverPort" $serviceName }}
              protocol: TCP
          env:
            - name: {{ include "global-globalDomainKey" . }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "global-name-configMap" . }}
                  key: {{ include "global-globalDomainKey" . }}
            - name: {{ include "global-k8sGetRequestErrorReasonKey" . }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "global-name-configMap" . }}
                  key: {{ include "global-k8sGetRequestErrorReasonKey" . }}
            - name: {{ include "global-natsServerHostKey" . }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "global-name-configMap" . }}
                  key: {{ include "global-natsServerHostKey" . }}
            - name: {{ include "global-natsServerPortKey" . }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "global-name-configMap" . }}
                  key: {{ include "global-natsServerPortKey" . }}
            - name: {{ include "global-traceCollectorHostKey" . }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "global-name-configMap" . }}
                  key: {{ include "global-traceCollectorHostKey" . }}
            - name: {{ include "global-traceCollectorPortKey" . }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "global-name-configMap" . }}
                  key: {{ include "global-traceCollectorPortKey" . }}
            {{- range $_, $configurableServiceName := prepend $serviceSpec.dependencies $serviceName }}
            - name: {{ include "service-serverHostnameKeyName" $configurableServiceName }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "service-name-configMap" $configurableServiceName }}
                  key: {{ include "service-serverHostnameKey" . }}
            - name: {{ include "service-serverPortKeyName" $configurableServiceName }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "service-name-configMap" $configurableServiceName }}
                  key: {{ include "service-serverPortKey" . }}
            {{- end}}
          volumeMounts:
          - name: "{{ include "service-corsConfigVolumeName" $serviceName }}"
            mountPath: "{{ include "service-corsConfigVolumeMountPath" $serviceName }}"
            readOnly: true
      volumes:
        - name: "{{ include "service-corsConfigVolumeName" $serviceName }}"
          configMap:
            name: {{ include "service-name-configMap" $serviceName }}
            items:
            - key: "{{ include "service-corsConfigFileName" $serviceName }}"
              path: "{{ include "service-corsConfigFileName" $serviceName }}"
{{- end }}