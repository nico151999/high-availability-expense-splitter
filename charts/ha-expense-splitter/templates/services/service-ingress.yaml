
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ include "service-name-ingress" "services" }}"
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.haExpenseSplitter.clusterCertIssuer | quote }}
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/server-snippet: "grpc_read_timeout 86400s; grpc_send_timeout 86400s;"
    nginx.ingress.kubernetes.io/use-regex: "false"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "{{ $.Values.haExpenseSplitter.services.cors.allowedMethods }}"
    nginx.ingress.kubernetes.io/cors-allow-headers: "{{ $.Values.haExpenseSplitter.services.cors.allowedHeaders }}"
    {{- range $_, $serviceSpec := merge (dict "reflection" .Values.haExpenseSplitter.services.reflection) .Values.haExpenseSplitter.services.specs }}
      {{- if default $.Values.haExpenseSplitter.linkerdMesh $serviceSpec.linkerdMesh }}
    nginx.ingress.kubernetes.io/service-upstream: "true"
        {{- break}}
      {{- end }}
    {{- end}}
spec:
  ingressClassName: "{{ $.Values.haExpenseSplitter.ingressClassName }}"
  rules:
    - host: "{{ $.Values.haExpenseSplitter.services.ingress.host }}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: "{{ $.Values.haExpenseSplitter.oathkeeper.service }}"
                port:
                  number: {{ $.Values.haExpenseSplitter.oathkeeper.port }}
  tls:
    - hosts:
        - "{{$.Values.haExpenseSplitter.services.ingress.host}}"
      secretName: "{{$.Values.haExpenseSplitter.services.ingress.certSecret}}"