# creates DB users for services and processors
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-create-db-users"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "10"
spec:
  template:
    spec:
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 0
      {{- include "securitycontext" (dict "primary" .Values.haExpenseSplitter.securityContext) | nindent 6 }}
      initContainers:
      - name: wait-for-database
        image: {{ include "busyboxImage" $ }}
        {{- if $.Values.haExpenseSplitter.readOnlyRootFilesystem }}
        securityContext:
          readOnlyRootFilesystem: true
        {{- end }}
        command:
          - 'sh'
          - '-c'
          - |
            until nc -z "{{ .Values.haExpenseSplitter.db.host }}" "{{ .Values.haExpenseSplitter.db.port }}"
            do
              echo \"waiting for database\"
              sleep 1
            done
      containers:
      - name: "create-db-users"
        image: "{{ .Values.haExpenseSplitter.db.image.psql.repository }}:{{ .Values.haExpenseSplitter.db.image.psql.tag }}"
        {{- if $.Values.haExpenseSplitter.readOnlyRootFilesystem }}
        securityContext:
          readOnlyRootFilesystem: true
        {{- end }}
        env:
        - name: PGDATABASE
          value: "{{ .Values.haExpenseSplitter.db.name }}"
        - name: PGHOST
          value: "{{ .Values.haExpenseSplitter.db.host }}"
        - name: PGPORT
          value: "{{ .Values.haExpenseSplitter.db.port }}"
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.haExpenseSplitter.db.adminUser.username.secret.name }}
              key: {{ .Values.haExpenseSplitter.db.adminUser.username.secret.key }}
        {{- if hasKey .Values.haExpenseSplitter.db.adminUser "password" }}
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.haExpenseSplitter.db.adminUser.password.secret.name }}
              key: {{ .Values.haExpenseSplitter.db.adminUser.password.secret.key }}
        {{- end }}
        {{- range $processorName, $processorSpec := .Values.haExpenseSplitter.processors.specs }}
        {{- if $processorSpec.db }}
        - name: {{ printf "%s_PROCESSOR_USER" (upper $processorName) }}
          valueFrom:
            secretKeyRef:
              name: {{ include "processor-name-secret" $processorName }}
              key: {{ include "dbUserKey" . }}
        - name: {{ printf "%s_PROCESSOR_PASSWORD" (upper $processorName) }}
          valueFrom:
            secretKeyRef:
              name: {{ include "processor-name-secret" $processorName }}
              key: {{ include "dbPasswordKey" . }}
        {{- end }}
        {{- end }}
        {{- range $serviceName, $serviceSpec := merge (merge (dict "documentation" .Values.haExpenseSplitter.documentation) .Values.haExpenseSplitter.services.specs) (dict "reflection" .Values.haExpenseSplitter.services.reflection) }}
        {{- if $serviceSpec.db }}
        - name: {{ printf "%s_SERVICE_USER" (upper $serviceName) }}
          valueFrom:
            secretKeyRef:
              name: {{ include "service-name-secret" $serviceName }}
              key: {{ include "dbUserKey" . }}
        - name: {{ printf "%s_SERVICE_PASSWORD" (upper $serviceName) }}
          valueFrom:
            secretKeyRef:
              name: {{ include "service-name-secret" $serviceName }}
              key: {{ include "dbPasswordKey" . }}
        {{- end }}
        {{- end }}
        command:
        - sh
        - -c
        - |
          echo "
          \set VERBOSITY verbose
          {{- range $processorName, $processorSpec := .Values.haExpenseSplitter.processors.specs }}
          {{- if $processorSpec.db }}
          REVOKE ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public FROM \"${{ printf "%s_PROCESSOR_USER" (upper $processorName) }}\";
          REVOKE ALL ON ALL TABLES IN SCHEMA public FROM \"${{ printf "%s_PROCESSOR_USER" (upper $processorName) }}\";
          REVOKE CONNECT ON DATABASE \"{{ $.Values.haExpenseSplitter.db.name }}\" FROM \"${{ printf "%s_PROCESSOR_USER" (upper $processorName) }}\";
          DROP ROLE IF EXISTS \"${{ printf "%s_PROCESSOR_USER" (upper $processorName) }}\";
          CREATE ROLE \"${{ printf "%s_PROCESSOR_USER" (upper $processorName) }}\" WITH LOGIN PASSWORD '${{ printf "%s_PROCESSOR_PASSWORD" (upper $processorName) }}';
          {{/* TODO: only grant specific permissions defined in values.yaml to user */}}
          GRANT CONNECT ON DATABASE \"{{ $.Values.haExpenseSplitter.db.name }}\" TO \"${{ printf "%s_PROCESSOR_USER" (upper $processorName) }}\";
          GRANT ALL ON ALL TABLES IN SCHEMA public TO \"${{ printf "%s_PROCESSOR_USER" (upper $processorName) }}\";
          GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO \"${{ printf "%s_PROCESSOR_USER" (upper $processorName) }}\";
          {{- end }}
          {{- end }}
          {{- range $serviceName, $serviceSpec := merge (merge (dict "documentation" .Values.haExpenseSplitter.documentation) .Values.haExpenseSplitter.services.specs) (dict "reflection" .Values.haExpenseSplitter.services.reflection) }}
          {{- if $serviceSpec.db }}
          REVOKE ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public FROM \"${{ printf "%s_SERVICE_USER" (upper $serviceName) }}\";
          REVOKE ALL ON ALL TABLES IN SCHEMA public FROM \"${{ printf "%s_SERVICE_USER" (upper $serviceName) }}\";
          REVOKE CONNECT ON DATABASE \"{{ $.Values.haExpenseSplitter.db.name }}\" FROM \"${{ printf "%s_SERVICE_USER" (upper $serviceName) }}\";
          DROP ROLE IF EXISTS \"${{ printf "%s_SERVICE_USER" (upper $serviceName) }}\";
          CREATE ROLE \"${{ printf "%s_SERVICE_USER" (upper $serviceName) }}\" WITH LOGIN PASSWORD '${{ printf "%s_SERVICE_PASSWORD" (upper $serviceName) }}';
          {{/* TODO: only grant specific permissions defined in values.yaml to user */}}
          GRANT CONNECT ON DATABASE \"{{ $.Values.haExpenseSplitter.db.name }}\" TO \"${{ printf "%s_SERVICE_USER" (upper $serviceName) }}\";
          GRANT ALL ON ALL TABLES IN SCHEMA public TO \"${{ printf "%s_SERVICE_USER" (upper $serviceName) }}\";
          GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO \"${{ printf "%s_SERVICE_USER" (upper $serviceName) }}\";
          {{- end }}
          {{- end }}
          " | psql
