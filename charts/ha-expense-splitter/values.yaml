global:
  domain: localhost # the organisation's global domain
  busybox:
    image:
      repository: busybox
      tag:

haExpenseSplitter:
  clusterCertIssuer: cluster-cert-issuer # the issuer name
  linkerdMesh: &linkerdMesh true # adds deployments to Linkerd mesh by adding the required annotation; requires Linkerd to be installed
  imagePullPolicy: &imagePullPolicy "IfNotPresent"
  imagePullSecrets: &imagePullSecrets []
  ingressClassName: nginx
  readOnlyRootFilesystem: true
  db:
    resourceName: expense-splitter-db
    name: expense_splitter
    host: expense-splitter-db-host
    port: "5432"
    adminUser:
      secret:
        name: expense-splitter-db-sec
        userKey: user
        passwordKey: password
      # -- if you want to create a new secret you need to remove the credentials key
      # credentials:
      #   user: username
      #   password: my-secure-password
    image:
      psql:
        repository: governmentpaas/psql
        tag: latest
    tables:
      category:
        name: categories
        schema:
          columns:
          - name: &categoryId id
            type: text
            constraints:
              notNull: true
          - name: &categoryGroupId group_id
            type: text
            constraints:
              notNull: true
          - name: name
            type: text
            constraints:
              notNull: true
          primaryKey:
          - *categoryId
          # no foreign keys since we do not want to rely on Postgres features
          indexes:
          - columns:
            - *categoryGroupId
            isUnique: false
      expense:
        name: expenses
        schema:
          columns:
          - name: &expenseId id
            type: text
            constraints:
              notNull: true
          - name: &expenseGroupId group_id
            type: text
            constraints:
              notNull: true
          - name: name
            type: text
            constraints:
              notNull: false
          - name: &expenseById by_id
            type: text
            constraints:
              notNull: true
          - name: timestamp
            type: timestamptz
            constraints:
              notNull: true
          - name: &expenseCurrencyId currency_id
            type: text
            constraints:
              notNull: true
          primaryKey:
          - *expenseId
          # no foreign keys since we do not want to rely on Postgres features
          indexes:
          - columns:
            - *expenseGroupId
            isUnique: false
          - columns:
            - *expenseById
            isUnique: false
          - columns:
            - *expenseCurrencyId
            isUnique: false
      group:
        name: groups
        schema:
          columns:
          - name: &groupId id
            type: text
            constraints:
              notNull: true
          - name: name
            type: text
            constraints:
              notNull: true
          - name: &groupCurrencyId currency_id
            type: text
            constraints:
              notNull: true
          primaryKey:
          - *groupId
          # no foreign keys since we do not want to rely on Postgres features
          indexes:
          - columns:
            - *groupCurrencyId
            isUnique: false
      person:
        name: people
        schema:
          columns:
          - name: &personId id
            type: text
            constraints:
              notNull: true
          - name: &personGroupId group_id
            type: text
            constraints:
              notNull: true
          - name: name
            type: text
            constraints:
              notNull: true
          primaryKey:
          - *personId
          # no foreign keys since we do not want to rely on Postgres features
          indexes:
          - columns:
            - *personGroupId
            isUnique: false
  securityContext: &securityContext
    runAsUser: 1000
    runAsNonRoot: true
  frontends:
    expenseSplitter:
      ingress:
        host: expense-splitter.ha-expense-splitter.localhost
        certSecret: "frontend-ingress-cert"
      imagePullPolicy: *imagePullPolicy
      imagePullSecrets: *imagePullSecrets
      linkerdMesh: *linkerdMesh
      securityContext: *securityContext
      image:
        repository: "my-registry/my-group/my-expense-splitter-frontend-repo"
        tag: "latest"
  documentation:
    db: false # tells if it uses the database
    ingress:
      host: "documentation.ha-expense-splitter.localhost"
      certSecret: "doc-ingress-cert"
    imagePullPolicy: *imagePullPolicy
    imagePullSecrets: *imagePullSecrets
    linkerdMesh: *linkerdMesh
    securityContext: *securityContext
    image:
      repository: "my-registry/my-group/my-doc-repo"
      tag: "latest"
  services:
    cors:
      allowedHeaders: "x-grpc-web,x-user-agent,content-type"
      allowedMethods: "GET,POST,PATCH,DELETE"
    ingress:
      host: "services.ha-expense-splitter.localhost"
      certSecret: "svc-ingress-cert"
      port: 443 # this does not actually deploy an ingress controller listening on this port but only tells other services which port they can reach the ingress controller on
      secure: true # same comment as for port
    nats:
      server: # the nats server
        host: my-nats-server.localhost
        port: 6222
    traceCollector:
      server:
        host: my-trace-collector.localhost
        port: 4317
    reflection:
      db: false # tells if it uses the database
      imagePullPolicy: *imagePullPolicy
      imagePullSecrets: *imagePullSecrets
      linkerdMesh: *linkerdMesh
      securityContext: *securityContext
      resources:
        limits:
          cpu: 250m
          memory: 250Mi
        requests:
          cpu: 25m
          memory: 50Mi
      autoscaling:
        minReplicas: 1
        maxReplicas: 10
        CPUUtilizationPercentage: 80
        memoryUtilizationPercentage: 80
      image:
        repository: "my-registry/my-group/my-reflection-repo"
        tag: "latest"
    specs:
      group:
        roles: [] # roles this service should have; those roles need to be defined in the templates
        clusterRoles: [] # cluster roles this service should have; those roles need to be defined in the templates
        db: true # tells if it uses the database
        ingress:
          endpoints:
            # TODO: create protoc plugin to auto-generate ingress.yaml
            - pathRegex: /service\.group\.v1\.GroupService/CreateGroup$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.group\.v1\.GroupService/GetGroup$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.group\.v1\.GroupService/ListGroupIds$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.group\.v1\.GroupService/UpdateGroup$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.group\.v1\.GroupService/DeleteGroup$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.group\.v1\.GroupService/StreamGroup$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.group\.v1\.GroupService/StreamGroupIds$
              methods:
                - POST
                - OPTIONS
        deployLinkerdServiceProfile: true # TODO: actually implement a Linkerd service profile
        imagePullPolicy: *imagePullPolicy
        imagePullSecrets: *imagePullSecrets
        linkerdMesh: *linkerdMesh
        securityContext: *securityContext
        resources:
          limits:
            cpu: 250m
            memory: 250Mi
          requests:
            cpu: 25m
            memory: 50Mi
        autoscaling:
          minReplicas: 1
          maxReplicas: 10
          CPUUtilizationPercentage: 80
          memoryUtilizationPercentage: 80
        image:
          repository: "my-registry/my-group/my-group-service-repo"
          tag: "latest"
        dependencies: [] # the services this service depends on
      expense:
        roles: [] # roles this service should have; those roles need to be defined in the templates
        clusterRoles: [] # cluster roles this service should have; those roles need to be defined in the templates
        db: true # tells if it uses the database
        ingress:
          endpoints:
            # TODO: create protoc plugin to auto-generate ingress.yaml
            - pathRegex: /service\.expense\.v1\.ExpenseService/CreateExpense$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.expense\.v1\.ExpenseService/GetExpense$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.expense\.v1\.ExpenseService/ListExpenseIdsInGroup$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.expense\.v1\.ExpenseService/UpdateExpense$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.expense\.v1\.ExpenseService/DeleteExpense$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.expense\.v1\.ExpenseService/StreamExpense$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.expense\.v1\.ExpenseService/StreamExpenseIdsInGroup$
              methods:
                - POST
                - OPTIONS
        deployLinkerdServiceProfile: true # TODO: actually implement a Linkerd service profile
        imagePullPolicy: *imagePullPolicy
        imagePullSecrets: *imagePullSecrets
        linkerdMesh: *linkerdMesh
        securityContext: *securityContext
        resources:
          limits:
            cpu: 250m
            memory: 250Mi
          requests:
            cpu: 25m
            memory: 50Mi
        autoscaling:
          minReplicas: 1
          maxReplicas: 10
          CPUUtilizationPercentage: 80
          memoryUtilizationPercentage: 80
        image:
          repository: "my-registry/my-group/my-expense-service-repo"
          tag: "latest"
        dependencies: [] # the services this service depends on
      person:
        roles: [] # roles this service should have; those roles need to be defined in the templates
        clusterRoles: [] # cluster roles this service should have; those roles need to be defined in the templates
        db: true # tells if it uses the database
        ingress:
          endpoints:
            # TODO: create protoc plugin to auto-generate ingress.yaml
            - pathRegex: /service\.person\.v1\.PersonService/CreatePerson$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.person\.v1\.PersonService/GetPerson$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.person\.v1\.PersonService/ListPersonIdsInGroup$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.person\.v1\.PersonService/UpdatePerson$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.person\.v1\.PersonService/DeletePerson$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.person\.v1\.PersonService/StreamPerson$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.person\.v1\.PersonService/StreamPersonIdsInGroup$
              methods:
                - POST
                - OPTIONS
        deployLinkerdServiceProfile: true # TODO: actually implement a Linkerd service profile
        imagePullPolicy: *imagePullPolicy
        imagePullSecrets: *imagePullSecrets
        linkerdMesh: *linkerdMesh
        securityContext: *securityContext
        resources:
          limits:
            cpu: 250m
            memory: 250Mi
          requests:
            cpu: 25m
            memory: 50Mi
        autoscaling:
          minReplicas: 1
          maxReplicas: 10
          CPUUtilizationPercentage: 80
          memoryUtilizationPercentage: 80
        image:
          repository: "my-registry/my-group/my-person-service-repo"
          tag: "latest"
        dependencies: [] # the services this service depends on
      category:
        roles: [] # roles this service should have; those roles need to be defined in the templates
        clusterRoles: [] # cluster roles this service should have; those roles need to be defined in the templates
        db: true # tells if it uses the database
        ingress:
          endpoints:
            # TODO: create protoc plugin to auto-generate ingress.yaml
            - pathRegex: /service\.category\.v1\.CategoryService/CreateCategory$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.category\.v1\.CategoryService/GetCategory$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.category\.v1\.CategoryService/ListCategoryIdsInGroup$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.category\.v1\.CategoryService/UpdateCategory$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.category\.v1\.CategoryService/DeleteCategory$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.category\.v1\.CategoryService/StreamCategory$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.category\.v1\.CategoryService/StreamCategoryIdsInGroup$
              methods:
                - POST
                - OPTIONS
        deployLinkerdServiceProfile: true # TODO: actually implement a Linkerd service profile
        imagePullPolicy: *imagePullPolicy
        imagePullSecrets: *imagePullSecrets
        linkerdMesh: *linkerdMesh
        securityContext: *securityContext
        resources:
          limits:
            cpu: 250m
            memory: 250Mi
          requests:
            cpu: 25m
            memory: 50Mi
        autoscaling:
          minReplicas: 1
          maxReplicas: 10
          CPUUtilizationPercentage: 80
          memoryUtilizationPercentage: 80
        image:
          repository: "my-registry/my-group/my-category-service-repo"
          tag: "latest"
        dependencies: [] # the services this service depends on
  processors:
    specs:
      group:
        roles: [] # roles this processor should have; those roles need to be defined in the templates
        clusterRoles: [] # cluster roles this processor should have; those roles need to be defined in the templates
        imagePullPolicy: *imagePullPolicy
        imagePullSecrets: *imagePullSecrets
        linkerdMesh: *linkerdMesh
        securityContext: *securityContext
        resources:
          limits:
            cpu: 250m
            memory: 250Mi
          requests:
            cpu: 25m
            memory: 50Mi
        autoscaling:
          minReplicas: 1
          maxReplicas: 10
          CPUUtilizationPercentage: 80
          memoryUtilizationPercentage: 80
        image:
          repository: "my-registry/my-group/my-group-processor-repo"
          tag: "latest"
        dependencies: [] # the services (not processors) this processor depends on (i.e. services this processor expects to be up and waiting for requests)
        clusterRoleRules: []
      expense:
        roles: [] # roles this processor should have; those roles need to be defined in the templates
        clusterRoles: [] # cluster roles this processor should have; those roles need to be defined in the templates
        db: true # tells if it uses the database
        imagePullPolicy: *imagePullPolicy
        imagePullSecrets: *imagePullSecrets
        linkerdMesh: *linkerdMesh
        securityContext: *securityContext
        resources:
          limits:
            cpu: 250m
            memory: 250Mi
          requests:
            cpu: 25m
            memory: 50Mi
        autoscaling:
          minReplicas: 1
          maxReplicas: 10
          CPUUtilizationPercentage: 80
          memoryUtilizationPercentage: 80
        image:
          repository: "my-registry/my-group/my-expense-processor-repo"
          tag: "latest"
        dependencies: [] # the services (not processors) this processor depends on (i.e. services this processor expects to be up and waiting for requests)
        clusterRoleRules: []
      person:
        roles: [] # roles this processor should have; those roles need to be defined in the templates
        clusterRoles: [] # cluster roles this processor should have; those roles need to be defined in the templates
        db: true # tells if it uses the database
        imagePullPolicy: *imagePullPolicy
        imagePullSecrets: *imagePullSecrets
        linkerdMesh: *linkerdMesh
        securityContext: *securityContext
        resources:
          limits:
            cpu: 250m
            memory: 250Mi
          requests:
            cpu: 25m
            memory: 50Mi
        autoscaling:
          minReplicas: 1
          maxReplicas: 10
          CPUUtilizationPercentage: 80
          memoryUtilizationPercentage: 80
        image:
          repository: "my-registry/my-group/my-person-processor-repo"
          tag: "latest"
        dependencies: [] # the services (not processors) this processor depends on (i.e. services this processor expects to be up and waiting for requests)
        clusterRoleRules: []
      category:
        roles: [] # roles this processor should have; those roles need to be defined in the templates
        clusterRoles: [] # cluster roles this processor should have; those roles need to be defined in the templates
        db: true # tells if it uses the database
        imagePullPolicy: *imagePullPolicy
        imagePullSecrets: *imagePullSecrets
        linkerdMesh: *linkerdMesh
        securityContext: *securityContext
        resources:
          limits:
            cpu: 250m
            memory: 250Mi
          requests:
            cpu: 25m
            memory: 50Mi
        autoscaling:
          minReplicas: 1
          maxReplicas: 10
          CPUUtilizationPercentage: 80
          memoryUtilizationPercentage: 80
        image:
          repository: "my-registry/my-group/my-category-processor-repo"
          tag: "latest"
        dependencies: [] # the services (not processors) this processor depends on (i.e. services this processor expects to be up and waiting for requests)
        clusterRoleRules: []