global:
  domain: localhost # the organisation's global domain
  busybox:
    image:
      repository: busybox
      tag:

haExpenseSplitter:
  clusterCertIssuer: cluster-cert-issuer # the issuer name
  linkerdMesh: &linkerdMesh true # adds deployments to Linkerd mesh by adding the required annotation; requires Linkerd to be installed
  imagePullPolicy: &imagePullPolicy "IfNotPresent"
  imagePullSecrets: &imagePullSecrets []
  ingressClassName: nginx
  readOnlyRootFilesystem: true
  securityContext: &securityContext
    runAsUser: 1000
    runAsNonRoot: true
  frontends:
    expenseSplitter:
      ingress:
        host: expense-splitter.ha-expense-splitter.localhost
        certSecret: "frontend-ingress-cert"
      imagePullPolicy: *imagePullPolicy
      imagePullSecrets: *imagePullSecrets
      linkerdMesh: *linkerdMesh
      securityContext: *securityContext
      image:
        repository: "my-registry/my-group/my-expense-splitter-frontend-repo"
        tag: "latest"
  documentation:
    ingress:
      host: "documentation.ha-expense-splitter.localhost"
      certSecret: "doc-ingress-cert"
    imagePullPolicy: *imagePullPolicy
    imagePullSecrets: *imagePullSecrets
    linkerdMesh: *linkerdMesh
    securityContext: *securityContext
    image:
      repository: "my-registry/my-group/my-doc-repo"
      tag: "latest"
  services:
    cors:
      additionalUrlPatterns: [] # in addition to the the frontends' ingress hosts
      allowedHeaders: ["*"]
      allowedMethods: ["GET", "POST", "PUT", "PATCH", "DELETE"]
    ingress:
      host: "services.ha-expense-splitter.localhost"
      certSecret: "svc-ingress-cert"
      port: 443 # this does not actually deploy an ingress controller listening on this port but only tells other services which port they can reach the ingress controller on
      secure: true # same comment as for port
    nats:
      server: # the nats server
        host: my-nats-server.localhost
        port: 6222
    traceCollector:
      server:
        host: my-trace-collector.localhost
        port: 4317
    reflection:
      imagePullPolicy: *imagePullPolicy
      imagePullSecrets: *imagePullSecrets
      linkerdMesh: *linkerdMesh
      securityContext: *securityContext
      resources:
        limits:
          cpu: 250m
          memory: 250Mi
        requests:
          cpu: 25m
          memory: 50Mi
      autoscaling:
        minReplicas: 1
        maxReplicas: 10
        CPUUtilizationPercentage: 80
        memoryUtilizationPercentage: 80
      image:
        repository: "my-registry/my-group/my-reflection-repo"
        tag: "latest"
    specs:
      group:
        roles: [] # roles this service should have; those roles need to be defined in the templates
        clusterRoles: [] # cluster roles this service should have; those roles need to be defined in the templates
        db:
          name: group-svc-db
          user: group-svc-db-user
          # TODO: turn user and password into the following
          # user:
          #   namespace: my-namespace
          #   secret: my-secret
          #   key: my-user-key
          password: group-svc-db-password
          host: group-svc-db-host
          port: 5432
        ingress:
          endpoints:
            # TODO: create protoc plugin to auto-generate ingress.yaml
            - pathRegex: /service\.group\.v1\.GroupService/CreateGroup$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.group\.v1\.GroupService/GetGroup$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.group\.v1\.GroupService/GetGroups$
              methods:
                - POST
                - OPTIONS
            - pathRegex: /service\.group\.v1\.GroupService/ListGroupIds$
              methods:
                - POST
                - OPTIONS
        deployLinkerdServiceProfile: true # TODO: actually implement a Linkerd service profile
        imagePullPolicy: *imagePullPolicy
        imagePullSecrets: *imagePullSecrets
        linkerdMesh: *linkerdMesh
        securityContext: *securityContext
        resources:
          limits:
            cpu: 250m
            memory: 250Mi
          requests:
            cpu: 25m
            memory: 50Mi
        autoscaling:
          minReplicas: 1
          maxReplicas: 10
          CPUUtilizationPercentage: 80
          memoryUtilizationPercentage: 80
        image:
          repository: "my-registry/my-group/my-group-service-repo"
          tag: "latest"
        dependencies: [] # the services this service depends on
  processors:
    specs:
      group:
        roles: [] # roles this processor should have; those roles need to be defined in the templates
        clusterRoles: [] # cluster roles this processor should have; those roles need to be defined in the templates
        db:
          name: group-proc-db
          user: group-proc-db-user
          password: group-proc-db-password
          host: group-proc-db-host
          port: 5432
        imagePullPolicy: *imagePullPolicy
        imagePullSecrets: *imagePullSecrets
        linkerdMesh: *linkerdMesh
        securityContext: *securityContext
        resources:
          limits:
            cpu: 250m
            memory: 250Mi
          requests:
            cpu: 25m
            memory: 50Mi
        autoscaling:
          minReplicas: 1
          maxReplicas: 10
          CPUUtilizationPercentage: 80
          memoryUtilizationPercentage: 80
        image:
          repository: "my-registry/my-group/my-group-processor-repo"
          tag: "latest"
        dependencies: [] # the services (not processors) this processor depends on (i.e. services this processor expects to be up and waiting for requests)
        clusterRoleRules: []