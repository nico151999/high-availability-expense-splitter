syntax = "proto3";

package service.group.v1;

import "common/group/v1/group.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
// buf:lint:ignore IMPORT_USED
import "google/rpc/error_details.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

service GroupService {
  // Requests the creation of a group with the provided specs
  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {
    option (google.api.http) = {post: "/v1/groups"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: [
        {
          key: "200"; // TODO: there is an HTTP 201 for created resources: consider adding it
          value: {
            description: "Returns specs describing the created group";
            schema: {
              json_schema: {ref: ".service.group.v1.CreateGroupResponse"};
            };
          };
        },
        {
          key: "400";
          value: {
            description: "Provides details telling the user about why the request was bad";
            schema: {
              json_schema: {ref: ".google.rpc.BadRequest"};
            };
          };
        },
        {
          key: "401";
          value: {
            description: "Provides details telling the user he is unauthenticated";
            schema: {
              json_schema: {ref: ".google.rpc.ErrorInfo"};
            };
          };
        },
        {
          key: "403";
          value: {
            description: "Provides details telling the user he is unauthorized to perform the requested operation";
            schema: {
              json_schema: {ref: ".google.rpc.ErrorInfo"};
            };
          };
        }
      ];
    };
  }
  // Gets a group
  rpc GetGroup(GetGroupRequest) returns (GetGroupResponse) {
    option (google.api.http) = {get: "/v1/groups/{group_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: [
        {
          key: "200";
          value: {
            description: "Returns specs describing the requested group";
            schema: {
              json_schema: {ref: ".service.group.v1.GetGroupResponse"};
            };
          };
        },
        {
          key: "400";
          value: {
            description: "Provides details telling the user about why the request was bad";
            schema: {
              json_schema: {ref: ".google.rpc.BadRequest"};
            };
          };
        },
        {
          key: "401";
          value: {
            description: "Provides details telling the user he is unauthenticated";
            schema: {
              json_schema: {ref: ".google.rpc.ErrorInfo"};
            };
          };
        },
        {
          key: "403";
          value: {
            description: "Provides details telling the user he is unauthorized to perform the requested operation";
            schema: {
              json_schema: {ref: ".google.rpc.ErrorInfo"};
            };
          };
        },
        {
          key: "404";
          value: {
            description: "Tells that the resource could not be found";
            schema: {
              json_schema: {ref: ".google.rpc.ErrorInfo"};
            };
          };
        }
      ];
    };
  }
  // Deletes a group
  rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse) {
    option (google.api.http) = {delete: "/v1/groups/{group_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: [
        {
          key: "200";
          value: {
            description: "Tells the group was successfully deleted";
            schema: {
              json_schema: {ref: ".service.group.v1.DeleteGroupResponse"};
            };
          };
        },
        {
          key: "400";
          value: {
            description: "Provides details telling the user about why the request was bad";
            schema: {
              json_schema: {ref: ".google.rpc.BadRequest"};
            };
          };
        },
        {
          key: "401";
          value: {
            description: "Provides details telling the user he is unauthenticated";
            schema: {
              json_schema: {ref: ".google.rpc.ErrorInfo"};
            };
          };
        },
        {
          key: "403";
          value: {
            description: "Provides details telling the user he is unauthorized to perform the requested operation";
            schema: {
              json_schema: {ref: ".google.rpc.ErrorInfo"};
            };
          };
        },
        {
          key: "404";
          value: {
            description: "Tells that the resource could not be found";
            schema: {
              json_schema: {ref: ".google.rpc.ErrorInfo"};
            };
          };
        }
      ];
    };
  }
  // Updates a group
  rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse) {
    option (google.api.http) = {patch: "/v1/groups/{group_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: [
        {
          key: "200";
          value: {
            description: "Returns the specs of the updated group";
            schema: {
              json_schema: {ref: ".service.group.v1.UpdateGroupResponse"};
            };
          };
        },
        {
          key: "400";
          value: {
            description: "Provides details telling the user about why the request was bad";
            schema: {
              json_schema: {ref: ".google.rpc.BadRequest"};
            };
          };
        },
        {
          key: "401";
          value: {
            description: "Provides details telling the user he is unauthenticated";
            schema: {
              json_schema: {ref: ".google.rpc.ErrorInfo"};
            };
          };
        },
        {
          key: "403";
          value: {
            description: "Provides details telling the user he is unauthorized to perform the requested operation";
            schema: {
              json_schema: {ref: ".google.rpc.ErrorInfo"};
            };
          };
        },
        {
          key: "404";
          value: {
            description: "Tells that the resource could not be found";
            schema: {
              json_schema: {ref: ".google.rpc.ErrorInfo"};
            };
          };
        }
      ];
    };
  }
  // Lists all group IDs
  rpc ListGroupIds(ListGroupIdsRequest) returns (ListGroupIdsResponse) {
    option (google.api.http) = {get: "/v1/groups:id"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: [
        {
          key: "200";
          value: {
            description: "Returns the requested group IDs";
            schema: {
              json_schema: {ref: ".service.group.v1.ListGroupIdsResponse"};
            };
          };
        },
        {
          key: "400";
          value: {
            description: "Provides details telling the user about why the request was bad";
            schema: {
              json_schema: {ref: ".google.rpc.BadRequest"};
            };
          };
        },
        {
          key: "401";
          value: {
            description: "Provides details telling the user he is unauthenticated";
            schema: {
              json_schema: {ref: ".google.rpc.ErrorInfo"};
            };
          };
        },
        {
          key: "403";
          value: {
            description: "Provides details telling the user he is unauthorized to perform the requested operation";
            schema: {
              json_schema: {ref: ".google.rpc.ErrorInfo"};
            };
          };
        },
        {
          key: "404";
          value: {
            description: "Tells that the resource could not be found";
            schema: {
              json_schema: {ref: ".google.rpc.ErrorInfo"};
            };
          };
        }
      ];
    };
  }
  // StreamGroupIds streams the list of all group IDs
  rpc StreamGroupIds(StreamGroupIdsRequest) returns (stream StreamGroupIdsResponse) {}
  // StreamGroup streams the requested group
  rpc StreamGroup(StreamGroupRequest) returns (stream StreamGroupResponse) {}
}

message UpdateGroupRequest {
  message UpdateField {
    oneof update_option {
      option (validate.required) = true;
      string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (validate.rules).string = {
          min_len: 1;
          max_len: 100;
        }
      ];
    }
  }
  string group_id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "common.group.v1/Group"},
    (validate.rules).string = {pattern: "^group-[A-Za-z0-9]{15}$"}
  ];
  repeated UpdateField update_fields = 2 [
    (validate.rules).repeated = {
      min_items: 1;
      max_items: 1;
    },
    (google.api.field_behavior) = REQUIRED
  ];
}

message UpdateGroupResponse {
  common.group.v1.Group group = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (validate.rules).message.required = true
  ];
}

message DeleteGroupRequest {
  // the ID of the group
  string group_id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "common.group.v1/Group"},
    (validate.rules).string = {pattern: "^group-[A-Za-z0-9]{15}$"}
  ];
}

message DeleteGroupResponse {}

message CreateGroupRequest {
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).string = {
      min_len: 1;
      max_len: 100;
    }
  ];
}

message CreateGroupResponse {
  // the ID of the group
  string group_id = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.resource_reference) = {type: "common.group.v1/Group"},
    (validate.rules).string = {pattern: "^group-[A-Za-z0-9]{15}$"}
  ];
}

message GetGroupRequest {
  // the ID of the group
  string group_id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "common.group.v1/Group"},
    (validate.rules).string = {pattern: "^group-[A-Za-z0-9]{15}$"}
  ];
}

message GetGroupResponse {
  common.group.v1.Group group = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (validate.rules).message.required = true
  ];
}

message ListGroupIdsRequest {}

message ListGroupIdsResponse {
  repeated string group_ids = 1 [
    (validate.rules).repeated.unique = true,
    (google.api.field_behavior) = OUTPUT_ONLY,
    (validate.rules).repeated.items.string = {pattern: "^group-[A-Za-z0-9]{15}$"}
  ];
}

message StreamGroupIdsRequest {}

message StreamGroupIdsResponse {
  // the current list of group IDs
  message GroupIds {
    repeated string group_ids = 1 [
      (validate.rules).repeated.unique = true,
      (google.api.field_behavior) = OUTPUT_ONLY,
      (validate.rules).repeated.items.string = {pattern: "^group-[A-Za-z0-9]{15}$"}
    ];
  }
  oneof update {
    option (validate.required) = true;
    google.protobuf.Empty still_alive = 1;
    GroupIds group_ids = 2 [
      (google.api.field_behavior) = OUTPUT_ONLY
    ];
  }
}

message StreamGroupRequest {
  // the ID of the group
  string group_id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "common.group.v1/Group"},
    (validate.rules).string = {pattern: "^group-[A-Za-z0-9]{15}$"}
  ];
}

message StreamGroupResponse {
  oneof update {
    option (validate.required) = true;
    google.protobuf.Empty still_alive = 1;
    // the current version of the subscribed group
    common.group.v1.Group group = 2 [
      (google.api.field_behavior) = OUTPUT_ONLY,
      (validate.rules).message.required = true
    ];
  }
}